// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TaskManager.Storage;

#nullable disable

namespace TaskManager.Storage.Migrations
{
    [DbContext(typeof(TaskManagerContext))]
    [Migration("20240918154407_DataSeed_v1")]
    partial class DataSeed_v1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TaskManager.Storage.Entities.FileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.ToTable("Files");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ded7ad22-1715-45bc-baf7-ea4dc6545707"),
                            Content = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            ContentType = "text/plain",
                            DateCreated = new DateTimeOffset(new DateTime(2024, 9, 18, 18, 44, 5, 171, DateTimeKind.Unspecified).AddTicks(950), new TimeSpan(0, 3, 0, 0, 0)),
                            FileName = "file1.txt",
                            TaskId = new Guid("652a5ab2-f53b-4e0e-8429-d285153be8ca")
                        },
                        new
                        {
                            Id = new Guid("ac5b2c0d-a115-4ae5-bda5-c7dfdf1074b2"),
                            Content = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            ContentType = "image/png",
                            DateCreated = new DateTimeOffset(new DateTime(2024, 9, 18, 18, 44, 5, 171, DateTimeKind.Unspecified).AddTicks(956), new TimeSpan(0, 3, 0, 0, 0)),
                            FileName = "file2.png",
                            TaskId = new Guid("652a5ab2-f53b-4e0e-8429-d285153be8ca")
                        },
                        new
                        {
                            Id = new Guid("29a6da1c-b725-48f4-a3be-95238646bc58"),
                            Content = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            ContentType = "text/plain",
                            DateCreated = new DateTimeOffset(new DateTime(2024, 9, 18, 18, 44, 5, 171, DateTimeKind.Unspecified).AddTicks(966), new TimeSpan(0, 3, 0, 0, 0)),
                            FileName = "file3.txt",
                            TaskId = new Guid("652a5ab2-f53b-4e0e-8429-d285153be8ca")
                        },
                        new
                        {
                            Id = new Guid("8b61ab77-722e-4abb-a9c7-f872e545321b"),
                            Content = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            ContentType = "text/plain",
                            DateCreated = new DateTimeOffset(new DateTime(2024, 9, 18, 18, 44, 5, 171, DateTimeKind.Unspecified).AddTicks(968), new TimeSpan(0, 3, 0, 0, 0)),
                            FileName = "file4.txt",
                            TaskId = new Guid("184b6c49-0c88-4c5b-87ff-e7401d5774a7")
                        },
                        new
                        {
                            Id = new Guid("7a662d83-3696-44c6-bcf0-98a2b80ba17d"),
                            Content = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            ContentType = "image/png",
                            DateCreated = new DateTimeOffset(new DateTime(2024, 9, 18, 18, 44, 5, 171, DateTimeKind.Unspecified).AddTicks(971), new TimeSpan(0, 3, 0, 0, 0)),
                            FileName = "file5.png",
                            TaskId = new Guid("184b6c49-0c88-4c5b-87ff-e7401d5774a7")
                        },
                        new
                        {
                            Id = new Guid("997e2aa4-0248-4a02-9732-ae875dba0382"),
                            Content = new byte[] { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
                            ContentType = "image/png",
                            DateCreated = new DateTimeOffset(new DateTime(2024, 9, 18, 18, 44, 5, 171, DateTimeKind.Unspecified).AddTicks(973), new TimeSpan(0, 3, 0, 0, 0)),
                            FileName = "file6.png",
                            TaskId = new Guid("256e975c-8f5b-4146-8504-25ebc2904dd8")
                        });
                });

            modelBuilder.Entity("TaskManager.Storage.Entities.TaskItemEntity", b =>
                {
                    b.Property<Guid>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("Date")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TaskId");

                    b.ToTable("Tasks");

                    b.HasData(
                        new
                        {
                            TaskId = new Guid("652a5ab2-f53b-4e0e-8429-d285153be8ca"),
                            Date = new DateTimeOffset(new DateTime(2024, 9, 18, 18, 44, 5, 171, DateTimeKind.Unspecified).AddTicks(812), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Task1",
                            Status = "Created"
                        },
                        new
                        {
                            TaskId = new Guid("184b6c49-0c88-4c5b-87ff-e7401d5774a7"),
                            Date = new DateTimeOffset(new DateTime(2024, 9, 18, 18, 44, 5, 171, DateTimeKind.Unspecified).AddTicks(839), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Task2",
                            Status = "Created"
                        },
                        new
                        {
                            TaskId = new Guid("256e975c-8f5b-4146-8504-25ebc2904dd8"),
                            Date = new DateTimeOffset(new DateTime(2024, 9, 18, 18, 44, 5, 171, DateTimeKind.Unspecified).AddTicks(841), new TimeSpan(0, 3, 0, 0, 0)),
                            Description = "Task3",
                            Status = "Created"
                        });
                });

            modelBuilder.Entity("TaskManager.Storage.Entities.FileEntity", b =>
                {
                    b.HasOne("TaskManager.Storage.Entities.TaskItemEntity", "TaskItemEntity")
                        .WithMany("Files")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskItemEntity");
                });

            modelBuilder.Entity("TaskManager.Storage.Entities.TaskItemEntity", b =>
                {
                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
